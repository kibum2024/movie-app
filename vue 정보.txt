1. vue 설치
npm install -g @vue/cli

2. 프로젝트 생성
vue create my-vue-app

cd my-vue-app

3.개발서버 시작
npm run serve

--------------------------------------------------------------
○ 개발환경(visual studio)
Vetur 설치:
Ctrl+Shift+X를 눌러 확장 프로그램 패널을 엽니다.
검색 창에 Vetur를 입력하고, 결과 목록에서 Vetur를 선택하여 설치합니다.

settings.json 파일 설정
Ctrl+Shift+P를 눌러 상단의 검색창을 엽니다.
Preferences: Open Settings (JSON)

Default Settings: 기본 설정 파일로, VS Code의 모든 기본 설정을 보여줍니다. 이 파일은 읽기 전용이며, 변경할 수 없습니다.
User Settings: 사용자 설정 파일로, 전체 VS Code 인스턴스에 적용되는 설정입니다. 일반적으로 이 파일을 수정하여 개인화된 설정을 적용합니다.
Workspace Settings: 특정 작업 공간(프로젝트)에만 적용되는 설정 파일입니다. 프로젝트별로 다른 설정이 필요할 때 사용합니다.


User Settings 기본적으로 사용저 설정파일을 변경

settings.json 파일을 다음과 같이 변경
{
    "workbench.colorTheme": "Visual Studio 2019 Dark",
    "editor.accessibilityPageSize": 13,
    "editor.fontSize": 16,
    "dotnet.server.useOmnisharp": true,
    "editor.fontFamily": "D2Coding,Consolas, 'Courier New', monospace",
    "explorer.confirmDelete": false,
    "liveServer.settings.donotShowInfoMsg": true,
    "files.exclude": {
        "**/.git": false
    },
    "git.autofetch": true,
    "editor.wordSeparators": "`~!@#$%^&*()=+[{]}\\|;:'\",.<>/?",
    "emmet.includeLanguages": {
        "javascript": "javascriptreact",
        "vue-html": "html",
        "vue": "html"
    },
    "emmet.triggerExpansionOnTab": true,
    "editor.quickSuggestions": {
        "other": true,
        "comments": false,
        "strings": true
    },
    "editor.suggestOnTriggerCharacters": true,
    "files.associations": {
        "*.vue": "vue"
    },
    "vetur.format.defaultFormatter.html": "js-beautify-html",
    "vetur.format.defaultFormatterOptions": {
        "js-beautify-html": {
            "wrap_attributes": "force-aligned"
        }
    },
    "vetur.validation.template": false,
    "editor.tokenColorCustomizations": {
        "[Visual Studio 2019 Dark]": {
            "textMateRules": [
                {
                    "scope": [
                        "meta.tag entity.name.tag",
                        "meta.tag punctuation.definition.tag.begin",
                        "meta.tag punctuation.definition.tag.end",
                        "meta.tag punctuation.definition.tag"
                    ],
                    "settings": {
                        "foreground": "#569CD6"
                    }
                }
            ]
        }
    }
}

<스니펫 설정>
Vue 소스를 편집할 때 특정 문자를 입력하면 컴포넌트 문장이 자동으로 나오도록 설정하려면, VS Code에서 사용자 정의 스니펫을 설정할 수 있습니다. 스니펫은 자주 사용하는 코드 조각을 빠르게 삽입할 수 있도록 도와주는 기능입니다.

사용자 정의 스니펫 설정 방법
스니펫 파일 열기

Ctrl+Shift+P를 눌러 명령 팔레트를 엽니다.
"Preferences: Configure User Snippets"를 검색하여 선택합니다.
"vue.json"을 선택하여 Vue 파일에 대한 사용자 정의 스니펫 파일을 엽니다.

vue.json 변경 vt : 템플릿,  mc : 컴포넌트
{
	"Vue Base": {
		"prefix": "vbase",
		"body": [
			"<template>",
			"  <div>",
			"    $0",
			"  </div>",
			"</template>",
			"",
			"<script>",
			"export default {",
			"  name: '$1',",
			"  data() {",
			"    return {",
			"      $2",
			"    };",
			"  },",
			"  methods: {",
			"    $3",
			"  }",
			"};",
			"</script>",
			"",
			"<style scoped>",
			"  $0",
			"</style>"
		],
		"description": "Inserts a Vue style block"
	},

	"Vue Template": {
		"prefix": "vt",
		"body": [
			"<template>",
			"  <div>",
			"    $0",
			"  </div>",
			"</template>"
		],
		"description": "Inserts a Vue template"
	},
	"Vue Script": {
		"prefix": "vsc",
		"body": [
			"<script>",
			"export default {",
			"  name: '$1',",
			"  data() {",
			"    return {",
			"      $2",
			"    };",
			"  },",
			"  methods: {",
			"    $3",
			"  }",
			"};",
			"</script>"
		],
		"description": "Inserts a Vue script block"
	},
	"Vue Style": {
		"prefix": "vst",
		"body": [
			"<style scoped>",
			"  $0",
			"</style>"
		],
		"description": "Inserts a Vue style block"
	},

	"My Component": {
        "prefix": "mc",
        "body": [
            "<MyComponent>",
            "  $0",
            "</MyComponent>"
        ],
        "description": "Inserts a MyComponent template"
    }
}


기본 스니펫  
Template
vbase:
<template>
  <div>
  </div>
</template>

<script>
export default {
  name: 'ComponentName'
}
</script>

<style scoped>
</style>


vfor:
<template>
  <div v-for="item in items" :key="item.id">
    {{ item.name }}
  </div>
</template>

vif:
<template>
  <div v-if="condition">
    {{ message }}
  </div>
</template>
Script

vdata:
data() {
  return {
    property: value
  }
}

vmethod:
methods: {
  methodName() {
    // code
  }
}
vcreated:
created() {
  // code
}


Style
vstyle:
<style scoped>
</style>

[router 설치]
npm install vue-router@next

npm install vue-router


--------------------------------------------------------------
vue 폴더 및 component 구조
--------------------------------------------------------------
my-spa-project/
├── public/
│   └── index.html
├── src/
│   ├── assets/
│   ├── components/
│   │   ├── Header.vue
│   │   ├── Footer.vue
│   ├── views/
│   │   ├── Home.vue
│   │   ├── About.vue
│   │   ├── Contact.vue
│   ├── router/
│   │   └── index.js
│   ├── App.vue
│   ├── main.js
│   └── store/
│       └── index.js
├── package.json
└── vue.config.js


store 사용할때 설치

npm install vuex@next

=======================================================
npm install gh-pages --save-dev

vue.config.js
4. vue.config.js 설정
프로젝트 루트 디렉토리에 vue.config.js 파일을 생성하고 다음 내용을 추가합니다.

-------------------------------------------------------
const { defineConfig } = require('@vue/cli-service')
module.exports = defineConfig({
  transpileDependencies: true,
  publicPath: '/movie-server-app/',
  outputDir: 'dist' 
})
-------------------------------------------------------


3. GitHub Actions 설정
GitHub Actions를 사용하여 자동으로 배포할 수 있습니다. .github/workflows 디렉토리를 만들고 deploy.yml 파일을 생성합니다. Visual Studio에서 이를 설정합니다.
 .github/workflows  디렉토리 만들기
deploy.yml
-------------------------------------------------------
name: Deploy Application

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest  # GitHub Actions가 제공하는 Ubuntu 환경에서 실행됨

    steps:
    - name: Checkout source code
      uses: actions/checkout@master

    - name: Set up Node.js
      uses: actions/setup-node@master
      with:
        node-version: '20'

    - name: Install dependencies
      run: npm install

    - name: Test unit
      run: npm run test:unit 
      
    - name: Build Page
      run: npm run build
      env:
          NODE_ENV: production

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./dist
-------------------------------------------------------


5. package.json 수정

  "scripts": {
    "serve": "vue-cli-service serve",
    "build": "vue-cli-service build",
    "test:unit": "vue-cli-service test:unit",
    "lint": "vue-cli-service lint",
    "deploy": "gh-pages -d dist",
    "clean": "gh-pages-clean",
    "predeploy": "vue-cli-service build"
  },

my-vue-app/
├── .git/
├── .github/
│   └── workflows/
│       └── deploy.yml
├── node_modules/
├── public/
├── src/
├── .gitignore
├── package.json
├── vue.config.js
└── README.md

=======================================================
visual studio tab 값 설정

옵션 열기:

상단 메뉴에서 File (파일) > Preferences (환경설정) > Settings (설정)을 클릭합니다. 또는, Ctrl + , 단축키를 사용해도 됩니다.
텍스트 편집기 설정 찾기:

검색 창에 Tab 또는 Indentation을 입력하여 관련 설정을 빠르게 찾습니다.
Text Editor (텍스트 편집기) 아래의 특정 언어를 선택합니다. 예를 들어, C#의 경우 C# > Tabs 또는 Indentation을 선택합니다.
탭 및 스페이스 설정 변경:

Tab size를 2로 설정하고, Indent size도 2로 설정합니다.
Insert spaces 옵션을 선택하여 탭 대신 스페이스를 사용하도록 합니다.

롯데시네마 freecomboy@paran.com 나라2468!


==============================================================


ALTER TABLE MOVIEDATA
CHANGE MOVIESNO MOVIE_NO INT;

ALTER USER 'firewind'@'%' IDENTIFIED WITH mysql_native_password BY 'qkfka'

commit

FLUSH PRIVILEGES;

SHOW DATABASES;

use testdb

update itemdata set DISCOUNTRATE = 0
where DISCOUNTRATE is null 


CREATE TABLE MOVIEDATA (
  movieNo INT PRIMARY key,
  openGUbun VARCHAR(1),
  actGubun VARCHAR(1),
  movieImgName VARCHAR(30),
  movieImg VARCHAR(50),
  seeMovieCount INT,
  wantMovieCount INT,
  reservationCount INT,
  movieTitle VARCHAR(150),
  ageLimited VARCHAR(3),
  showTime VARCHAR(10),
  openDate VARCHAR(10),
  genre VARCHAR(100),
  movieDirector VARCHAR(100),
  productionCountry VARCHAR(30)
);

CREATE TABLE PLACEDATA (
  menuNO VARCHAR(4),
  placeNO VARCHAR(2),
  placeName VARCHAR(100),
  menuRouter VARCHAR(150),
  PRIMARY KEY (menuNO, placeNo)
);

CREATE TABLE PLACE_MOVIE (
  menuNO VARCHAR(4),
  placeNO VARCHAR(2),
  movieNo int,
  openGUbun VARCHAR(1),
  actGubun VARCHAR(1),
  movieImgName VARCHAR(30),
  seeMovieCount INT,
  wantMovieCount INT,
  reservationCount INT,
  movieTitle VARCHAR(150),
  ageLimited VARCHAR(3),
  showTime VARCHAR(10),
  openDate VARCHAR(10),
  placeMovieOpen VARCHAR(1),
  movieRouter VARCHAR(150),
  PRIMARY KEY (menuNO, placeNo, movieNo)
);

insert into PLACE_MOVIE 
select a.menuNO, A.placeNO, B.movieNo, b.openGUbun, b.actGubun, b.movieImgName, 
	b.seeMovieCount, b.wantMovieCount, b.reservationCount, b.movieTitle,
	b.ageLimited, b.showTime, b.openDate, '1' as placeMovieOpen, A.menuRouter  
from PLACEDATA A, MOVIEDATA B
order by a.menuNO, A.placeNO, B.movieNo

CREATE TABLE MOVIE_SHOWTIME (
  menuNo VARCHAR(4),
  placeNo VARCHAR(2),
  movieNo int,
  showDay VARCHAR(8),
  showRoom VARCHAR(20),
  showTime VARCHAR(5),
  movieTitle VARCHAR(150),
  ageLimited VARCHAR(3),
  capacityCount INT,
  reservationCount INT,
  showGubun VARCHAR(10),
  linesGubun VARCHAR(10),
  showRoomGubun VARCHAR(3),
  PRIMARY KEY (menuNO, placeNo, movieNo, showDay, showRoom, showTime)
);

drop table MOVIE_SHOWTIME

commit;

show tables;


insert into MOVIE_SHOWTIME 
select menuNo, placeNo, movieNo, "20240728" as showDay, "1관" as showRoom, "12:10" as showTime, movieTitle, ageLimited, 170 as capacityCount, 10 as reservationCount, "2D" as showGubun, "더빙" as linesGubun, "001" as showRoomGubun from PLACE_MOVIE;

insert into MOVIE_SHOWTIME
select menuNo, placeNo, movieNo, "20240728" as showDay, "1관" as showRoom, "15:40" as showTime, movieTitle, ageLimited, 170 as capacityCount, 10 as reservationCount, "2D" as showGubun, "더빙" as linesGubun, "001" as showRoomGubun from PLACE_MOVIE;

insert into MOVIE_SHOWTIME
select menuNo, placeNo, movieNo, "20240729" as showDay, "1관" as showRoom, "12:10" as showTime, movieTitle, ageLimited, 170 as capacityCount, 10 as reservationCount, "2D" as showGubun, "더빙" as linesGubun, "001" as showRoomGubun from PLACE_MOVIE;

insert into MOVIE_SHOWTIME
select menuNo, placeNo, movieNo, "20240730" as showDay, "1관" as showRoom, "15:40" as showTime, movieTitle, ageLimited, 170 as capacityCount, 10 as reservationCount, "2D" as showGubun, "더빙" as linesGubun, "001" as showRoomGubun from PLACE_MOVIE;

select * from MOVIE_SHOWTIME

select * from PLACE_MOVIE

select * from moviedata m 


ALTER TABLE PLACE_MOVIE CHANGE menuNO menuNo VARCHAR(4);

ALTER TABLE PLACE_MOVIE CHANGE placeNO placeNo VARCHAR(2);





