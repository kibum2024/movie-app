1. vue 설치
npm install -g @vue/cli

2. 프로젝트 생성
vue create my-vue-app

cd my-vue-app

3.개발서버 시작
npm run serve

--------------------------------------------------------------
○ 개발환경(visual studio)
Vetur 설치:
Ctrl+Shift+X를 눌러 확장 프로그램 패널을 엽니다.
검색 창에 Vetur를 입력하고, 결과 목록에서 Vetur를 선택하여 설치합니다.

settings.json 파일 설정
Ctrl+Shift+P를 눌러 상단의 검색창을 엽니다.
Preferences: Open Settings (JSON)

Default Settings: 기본 설정 파일로, VS Code의 모든 기본 설정을 보여줍니다. 이 파일은 읽기 전용이며, 변경할 수 없습니다.
User Settings: 사용자 설정 파일로, 전체 VS Code 인스턴스에 적용되는 설정입니다. 일반적으로 이 파일을 수정하여 개인화된 설정을 적용합니다.
Workspace Settings: 특정 작업 공간(프로젝트)에만 적용되는 설정 파일입니다. 프로젝트별로 다른 설정이 필요할 때 사용합니다.


User Settings 기본적으로 사용저 설정파일을 변경

settings.json 파일을 다음과 같이 변경
{
    "workbench.colorTheme": "Visual Studio 2019 Dark",
    "editor.accessibilityPageSize": 13,
    "editor.fontSize": 16,
    "dotnet.server.useOmnisharp": true,
    "editor.fontFamily": "D2Coding,Consolas, 'Courier New', monospace",
    "explorer.confirmDelete": false,
    "liveServer.settings.donotShowInfoMsg": true,
    "files.exclude": {
        "**/.git": false
    },
    "git.autofetch": true,
    "editor.wordSeparators": "`~!@#$%^&*()=+[{]}\\|;:'\",.<>/?",
    "emmet.includeLanguages": {
        "javascript": "javascriptreact",
        "vue-html": "html",
        "vue": "html"
    },
    "emmet.triggerExpansionOnTab": true,
    "editor.quickSuggestions": {
        "other": true,
        "comments": false,
        "strings": true
    },
    "editor.suggestOnTriggerCharacters": true,
    "files.associations": {
        "*.vue": "vue"
    },
    "vetur.format.defaultFormatter.html": "js-beautify-html",
    "vetur.format.defaultFormatterOptions": {
        "js-beautify-html": {
            "wrap_attributes": "force-aligned"
        }
    },
    "vetur.validation.template": false,
    "editor.tokenColorCustomizations": {
        "[Visual Studio 2019 Dark]": {
            "textMateRules": [
                {
                    "scope": [
                        "meta.tag entity.name.tag",
                        "meta.tag punctuation.definition.tag.begin",
                        "meta.tag punctuation.definition.tag.end",
                        "meta.tag punctuation.definition.tag"
                    ],
                    "settings": {
                        "foreground": "#569CD6"
                    }
                }
            ]
        }
    }
}

<스니펫 설정>
Vue 소스를 편집할 때 특정 문자를 입력하면 컴포넌트 문장이 자동으로 나오도록 설정하려면, VS Code에서 사용자 정의 스니펫을 설정할 수 있습니다. 스니펫은 자주 사용하는 코드 조각을 빠르게 삽입할 수 있도록 도와주는 기능입니다.

사용자 정의 스니펫 설정 방법
스니펫 파일 열기

Ctrl+Shift+P를 눌러 명령 팔레트를 엽니다.
"Preferences: Configure User Snippets"를 검색하여 선택합니다.
"vue.json"을 선택하여 Vue 파일에 대한 사용자 정의 스니펫 파일을 엽니다.

vue.json 변경 vt : 템플릿,  mc : 컴포넌트
{
	"Vue Base": {
		"prefix": "vbase",
		"body": [
			"<template>",
			"  <div>",
			"    $0",
			"  </div>",
			"</template>",
			"",
			"<script>",
			"export default {",
			"  name: '$1',",
			"  data() {",
			"    return {",
			"      $2",
			"    };",
			"  },",
			"  methods: {",
			"    $3",
			"  }",
			"};",
			"</script>",
			"",
			"<style scoped>",
			"  $0",
			"</style>"
		],
		"description": "Inserts a Vue style block"
	},

	"Vue Template": {
		"prefix": "vt",
		"body": [
			"<template>",
			"  <div>",
			"    $0",
			"  </div>",
			"</template>"
		],
		"description": "Inserts a Vue template"
	},
	"Vue Script": {
		"prefix": "vsc",
		"body": [
			"<script>",
			"export default {",
			"  name: '$1',",
			"  data() {",
			"    return {",
			"      $2",
			"    };",
			"  },",
			"  methods: {",
			"    $3",
			"  }",
			"};",
			"</script>"
		],
		"description": "Inserts a Vue script block"
	},
	"Vue Style": {
		"prefix": "vst",
		"body": [
			"<style scoped>",
			"  $0",
			"</style>"
		],
		"description": "Inserts a Vue style block"
	},

	"My Component": {
        "prefix": "mc",
        "body": [
            "<MyComponent>",
            "  $0",
            "</MyComponent>"
        ],
        "description": "Inserts a MyComponent template"
    }
}


기본 스니펫  
Template
vbase:
<template>
  <div>
  </div>
</template>

<script>
export default {
  name: 'ComponentName'
}
</script>

<style scoped>
</style>


vfor:
<template>
  <div v-for="item in items" :key="item.id">
    {{ item.name }}
  </div>
</template>

vif:
<template>
  <div v-if="condition">
    {{ message }}
  </div>
</template>
Script

vdata:
data() {
  return {
    property: value
  }
}

vmethod:
methods: {
  methodName() {
    // code
  }
}
vcreated:
created() {
  // code
}


Style
vstyle:
<style scoped>
</style>

[router 설치]
npm install vue-router@next

npm install vue-router


--------------------------------------------------------------
vue 폴더 및 component 구조
--------------------------------------------------------------
my-spa-project/
├── public/
│   └── index.html
├── src/
│   ├── assets/
│   ├── components/
│   │   ├── Header.vue
│   │   ├── Footer.vue
│   ├── views/
│   │   ├── Home.vue
│   │   ├── About.vue
│   │   ├── Contact.vue
│   ├── router/
│   │   └── index.js
│   ├── App.vue
│   ├── main.js
│   └── store/
│       └── index.js
├── package.json
└── vue.config.js

=======================================================